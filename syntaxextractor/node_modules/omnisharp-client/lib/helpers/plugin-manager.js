"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require("lodash");

var _rx = require("rx");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PluginManager = exports.PluginManager = function () {
    function PluginManager(plugins) {
        var _this = this;

        _classCallCheck(this, PluginManager);

        this._disposable = new _rx.CompositeDisposable();
        this._pluginsChanged = new _rx.Subject();
        this._currentBootstrap = null;
        this._observePluginsChanged = this._pluginsChanged.debounce(1000);
        this._plugins = new Set();
        (0, _lodash.each)(plugins, function (plugin) {
            return _this._plugins.add(plugin);
        });
        this._disposable.add(this._pluginsChanged.subscribe(function () {
            return _this._currentBootstrap = null;
        }));
    }

    _createClass(PluginManager, [{
        key: "add",
        value: function add(plugin) {
            this._plugins.add(plugin);
            this._pluginsChanged.onNext(true);
        }
    }, {
        key: "remove",
        value: function remove(plugin) {
            this._plugins.delete(plugin);
            this._pluginsChanged.onNext(true);
        }
    }, {
        key: "dispose",
        value: function dispose() {
            this._disposable.dispose();
        }
    }, {
        key: "changed",
        get: function get() {
            return this._observePluginsChanged;
        }
    }, {
        key: "plugins",
        get: function get() {
            return this._plugins;
        }
    }]);

    return PluginManager;
}();