"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PluginManager = undefined;

var _lodash = require("lodash");

var _child_process = require("child_process");

var _rx = require("rx");

var _omnisharpPath = require("../omnisharp-path");

var _fs = require("fs");

var fs = _interopRequireWildcard(_fs);

var _path = require("path");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var exists = _rx.Observable.fromCallback(fs.exists),
    readFile = _rx.Observable.fromNodeCallback(fs.readFile);
var md5 = require("md5");

var PluginManager = exports.PluginManager = (function () {
    function PluginManager(_solutionLocation, plugins) {
        var _this = this;

        _classCallCheck(this, PluginManager);

        this._solutionLocation = _solutionLocation;
        this._pluginsChanged = new _rx.Subject();
        this._bootstrappedPlugins = new Map();
        this._currentBootstrap = null;
        this._plugins = new Set();
        (0, _lodash.each)(plugins, function (plugin) {
            return _this._plugins.add(plugin);
        });
        this._pluginsChanged.subscribe(function () {
            return _this._currentBootstrap = null;
        });
    }

    _createClass(PluginManager, [{
        key: "getOmnisharpPath",
        value: function getOmnisharpPath() {
            var _this2 = this;

            if (this._currentBootstrap) return _rx.Observable.just(this._currentBootstrap);
            var plugins = [];
            var hashStrings = [];
            var hash = undefined;
            this._plugins.forEach(function (plugin) {
                plugins.push(plugin);
            });
            return _rx.Observable.create(function (observer) {
                // Include the plugins defined in omnisharp.json, they could have changed.
                exists((0, _path.join)(_this2._solutionLocation, "omnisharp.json")).where(function (x) {
                    return !!x;
                }).flatMap(function (x) {
                    return readFile((0, _path.join)(_this2._solutionLocation, "omnisharp.json"));
                }).map(function (x) {
                    return JSON.parse(x.toString());
                }).tapOnNext(function (obj) {
                    if (obj.plugins) {
                        hashStrings.push(obj.plugins);
                    }
                }).subscribeOnCompleted(function () {
                    hash = md5(JSON.stringify(plugins.concat(hashStrings)));
                    if (_this2._bootstrappedPlugins.has(hash)) {
                        observer.onNext(_this2._bootstrappedPlugins.get(hash));
                        observer.onCompleted();
                        return;
                    }
                    var command = [_omnisharpPath.bootstrapLocation, "-    s", _this2._solutionLocation].concat(plugins.map(function (x) {
                        if (x.location) {
                            return "--plugins " + x.location;
                        } else if (x.version) {
                            return "--plugin-name " + x.name + "@" + x.version;
                        } else {
                            return "--plugin-name " + x.name;
                        }
                    })).join(" ");
                    (0, _child_process.exec)(command, function (error, stdout) {
                        observer.onNext(stdout.toString());
                        observer.onCompleted();
                    });
                });
            }).tapOnNext(function (result) {
                _this2._currentBootstrap = result;
                _this2._bootstrappedPlugins.set(hash, result);
            });
        }
    }, {
        key: "add",
        value: function add(plugin) {
            this._plugins.add(plugin);
            this._pluginsChanged.onNext(true);
        }
    }, {
        key: "remove",
        value: function remove(plugin) {
            this._plugins.delete(plugin);
            this._pluginsChanged.onNext(true);
        }
    }]);

    return PluginManager;
})();