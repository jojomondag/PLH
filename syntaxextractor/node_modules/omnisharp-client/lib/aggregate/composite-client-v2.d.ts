import { Models, Events, Context, CombinationKey } from "../omnisharp-server";
import { ClientV2 } from "../clients/client-v2";
import { ObservationClientBase, CombinationClientBase } from "./composite-client-base";
export declare class ObservationClientV2<T extends ClientV2> extends ObservationClientBase<T> implements Events.V2 {
    readonly autocomplete: Rx.Observable<Context<Models.AutoCompleteRequest, Models.AutoCompleteResponse[]>>;
    readonly changebuffer: Rx.Observable<Context<Models.ChangeBufferRequest, any>>;
    readonly codecheck: Rx.Observable<Context<Models.CodeCheckRequest, Models.QuickFixResponse>>;
    readonly codeformat: Rx.Observable<Context<Models.CodeFormatRequest, Models.CodeFormatResponse>>;
    readonly currentfilemembersasflat: Rx.Observable<Context<Models.MembersFlatRequest, Models.QuickFix[]>>;
    readonly currentfilemembersastree: Rx.Observable<Context<Models.MembersTreeRequest, Models.FileMemberTree>>;
    readonly filesChanged: Rx.Observable<Context<Models.Request[], Models.FilesChangedResponse>>;
    readonly findimplementations: Rx.Observable<Context<Models.FindImplementationsRequest, Models.QuickFixResponse>>;
    readonly findsymbols: Rx.Observable<Context<Models.FindSymbolsRequest, Models.QuickFixResponse>>;
    readonly findusages: Rx.Observable<Context<Models.FindUsagesRequest, Models.QuickFixResponse>>;
    readonly fixusings: Rx.Observable<Context<Models.FixUsingsRequest, Models.FixUsingsResponse>>;
    readonly formatAfterKeystroke: Rx.Observable<Context<Models.FormatAfterKeystrokeRequest, Models.FormatRangeResponse>>;
    readonly formatRange: Rx.Observable<Context<Models.FormatRangeRequest, Models.FormatRangeResponse>>;
    readonly getcodeactions: Rx.Observable<Context<Models.V2.GetCodeActionsRequest, Models.V2.GetCodeActionsResponse>>;
    readonly gettestcontext: Rx.Observable<Context<Models.TestCommandRequest, Models.GetTestCommandResponse>>;
    readonly gotodefinition: Rx.Observable<Context<Models.GotoDefinitionRequest, Models.GotoDefinitionResponse>>;
    readonly gotofile: Rx.Observable<Context<Models.GotoFileRequest, Models.QuickFixResponse>>;
    readonly gotoregion: Rx.Observable<Context<Models.GotoRegionRequest, Models.QuickFixResponse>>;
    readonly highlight: Rx.Observable<Context<Models.HighlightRequest, Models.HighlightResponse>>;
    readonly metadata: Rx.Observable<Context<Models.MetadataRequest, Models.MetadataResponse>>;
    readonly navigatedown: Rx.Observable<Context<Models.NavigateDownRequest, Models.NavigateResponse>>;
    readonly navigateup: Rx.Observable<Context<Models.NavigateUpRequest, Models.NavigateResponse>>;
    readonly packagesearch: Rx.Observable<Context<Models.PackageSearchRequest, Models.PackageSearchResponse>>;
    readonly packagesource: Rx.Observable<Context<Models.PackageSourceRequest, Models.PackageSourceResponse>>;
    readonly packageversion: Rx.Observable<Context<Models.PackageVersionRequest, Models.PackageVersionResponse>>;
    readonly project: Rx.Observable<Context<Models.v1.ProjectInformationRequest, Models.ProjectInformationResponse>>;
    readonly projects: Rx.Observable<Context<Models.v1.WorkspaceInformationRequest, Models.WorkspaceInformationResponse>>;
    readonly rename: Rx.Observable<Context<Models.RenameRequest, Models.RenameResponse>>;
    readonly runcodeaction: Rx.Observable<Context<Models.V2.RunCodeActionRequest, Models.V2.RunCodeActionResponse>>;
    readonly signatureHelp: Rx.Observable<Context<Models.SignatureHelpRequest, Models.SignatureHelp>>;
    readonly typelookup: Rx.Observable<Context<Models.TypeLookupRequest, Models.TypeLookupResponse>>;
    readonly updatebuffer: Rx.Observable<Context<Models.UpdateBufferRequest, any>>;
}
export declare class AggregateClientV2<T extends ClientV2> extends CombinationClientBase<T> implements Events.Aggregate.V2 {
    readonly autocomplete: Rx.Observable<CombinationKey<Context<Models.AutoCompleteRequest, Models.AutoCompleteResponse[]>>[]>;
    readonly changebuffer: Rx.Observable<CombinationKey<Context<Models.ChangeBufferRequest, any>>[]>;
    readonly codecheck: Rx.Observable<CombinationKey<Context<Models.CodeCheckRequest, Models.QuickFixResponse>>[]>;
    readonly codeformat: Rx.Observable<CombinationKey<Context<Models.CodeFormatRequest, Models.CodeFormatResponse>>[]>;
    readonly currentfilemembersasflat: Rx.Observable<CombinationKey<Context<Models.MembersFlatRequest, Models.QuickFix[]>>[]>;
    readonly currentfilemembersastree: Rx.Observable<CombinationKey<Context<Models.MembersTreeRequest, Models.FileMemberTree>>[]>;
    readonly filesChanged: Rx.Observable<CombinationKey<Context<Models.Request[], Models.FilesChangedResponse>>[]>;
    readonly findimplementations: Rx.Observable<CombinationKey<Context<Models.FindImplementationsRequest, Models.QuickFixResponse>>[]>;
    readonly findsymbols: Rx.Observable<CombinationKey<Context<Models.FindSymbolsRequest, Models.QuickFixResponse>>[]>;
    readonly findusages: Rx.Observable<CombinationKey<Context<Models.FindUsagesRequest, Models.QuickFixResponse>>[]>;
    readonly fixusings: Rx.Observable<CombinationKey<Context<Models.FixUsingsRequest, Models.FixUsingsResponse>>[]>;
    readonly formatAfterKeystroke: Rx.Observable<CombinationKey<Context<Models.FormatAfterKeystrokeRequest, Models.FormatRangeResponse>>[]>;
    readonly formatRange: Rx.Observable<CombinationKey<Context<Models.FormatRangeRequest, Models.FormatRangeResponse>>[]>;
    readonly getcodeactions: Rx.Observable<CombinationKey<Context<Models.V2.GetCodeActionsRequest, Models.V2.GetCodeActionsResponse>>[]>;
    readonly gettestcontext: Rx.Observable<CombinationKey<Context<Models.TestCommandRequest, Models.GetTestCommandResponse>>[]>;
    readonly gotodefinition: Rx.Observable<CombinationKey<Context<Models.GotoDefinitionRequest, Models.GotoDefinitionResponse>>[]>;
    readonly gotofile: Rx.Observable<CombinationKey<Context<Models.GotoFileRequest, Models.QuickFixResponse>>[]>;
    readonly gotoregion: Rx.Observable<CombinationKey<Context<Models.GotoRegionRequest, Models.QuickFixResponse>>[]>;
    readonly highlight: Rx.Observable<CombinationKey<Context<Models.HighlightRequest, Models.HighlightResponse>>[]>;
    readonly metadata: Rx.Observable<CombinationKey<Context<Models.MetadataRequest, Models.MetadataResponse>>[]>;
    readonly navigatedown: Rx.Observable<CombinationKey<Context<Models.NavigateDownRequest, Models.NavigateResponse>>[]>;
    readonly navigateup: Rx.Observable<CombinationKey<Context<Models.NavigateUpRequest, Models.NavigateResponse>>[]>;
    readonly packagesearch: Rx.Observable<CombinationKey<Context<Models.PackageSearchRequest, Models.PackageSearchResponse>>[]>;
    readonly packagesource: Rx.Observable<CombinationKey<Context<Models.PackageSourceRequest, Models.PackageSourceResponse>>[]>;
    readonly packageversion: Rx.Observable<CombinationKey<Context<Models.PackageVersionRequest, Models.PackageVersionResponse>>[]>;
    readonly project: Rx.Observable<CombinationKey<Context<Models.v1.ProjectInformationRequest, Models.ProjectInformationResponse>>[]>;
    readonly projects: Rx.Observable<CombinationKey<Context<Models.v1.WorkspaceInformationRequest, Models.WorkspaceInformationResponse>>[]>;
    readonly rename: Rx.Observable<CombinationKey<Context<Models.RenameRequest, Models.RenameResponse>>[]>;
    readonly runcodeaction: Rx.Observable<CombinationKey<Context<Models.V2.RunCodeActionRequest, Models.V2.RunCodeActionResponse>>[]>;
    readonly signatureHelp: Rx.Observable<CombinationKey<Context<Models.SignatureHelpRequest, Models.SignatureHelp>>[]>;
    readonly typelookup: Rx.Observable<CombinationKey<Context<Models.TypeLookupRequest, Models.TypeLookupResponse>>[]>;
    readonly updatebuffer: Rx.Observable<CombinationKey<Context<Models.UpdateBufferRequest, any>>[]>;
}
