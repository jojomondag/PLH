import { ReplaySubject, Observable, CompositeDisposable, Disposable } from "rx";
import { DriverState } from "../enums";
import { OmnisharpClientStatus } from "../enums";
import { RequestContext, ResponseContext, CommandContext } from "../contexts";
import * as OmniSharp from "../omnisharp-server";
export declare class ObservationClientBase<Client> implements OmniSharp.Events, Rx.IDisposable {
    private clients;
    protected _disposable: CompositeDisposable;
    private _clientDisposable;
    protected _clientsSubject: ReplaySubject<Client[]>;
    readonly projectAdded: Observable<OmniSharp.Models.ProjectInformationResponse>;
    readonly projectChanged: Observable<OmniSharp.Models.ProjectInformationResponse>;
    readonly projectRemoved: Observable<OmniSharp.Models.ProjectInformationResponse>;
    readonly error: Observable<OmniSharp.Models.ErrorMessage>;
    readonly msBuildProjectDiagnostics: Observable<OmniSharp.Models.MSBuildProjectDiagnostics>;
    readonly packageRestoreStarted: Observable<OmniSharp.Models.PackageRestoreMessage>;
    readonly packageRestoreFinished: Observable<OmniSharp.Models.PackageRestoreMessage>;
    readonly unresolvedDependencies: Observable<OmniSharp.Models.UnresolvedDependenciesMessage>;
    readonly events: Rx.Observable<OmniSharp.Stdio.Protocol.EventPacket>;
    readonly commands: Rx.Observable<OmniSharp.Stdio.Protocol.ResponsePacket>;
    readonly state: Rx.Observable<DriverState>;
    readonly status: Rx.Observable<OmnisharpClientStatus>;
    readonly requests: Rx.Observable<RequestContext<any>>;
    readonly responses: Rx.Observable<ResponseContext<any, any>>;
    readonly errors: Rx.Observable<CommandContext<any>>;
    constructor(clients?: Client[]);
    dispose(): void;
    protected makeMergeObserable: <T>(selector: (client: Client) => Observable<T>) => Observable<T>;
    observe<T>(selector: (client: Client) => Observable<T>): Observable<T>;
    private onNext;
    add(client: Client): Disposable;
}
export declare class CombinationClientBase<Client extends {
    uniqueId: string;
}> implements OmniSharp.Aggregate.Events, Rx.IDisposable {
    private clients;
    protected _disposable: CompositeDisposable;
    private _clientDisposable;
    _clientsSubject: ReplaySubject<Client[]>;
    readonly projectAdded: Observable<OmniSharp.CombinationKey<OmniSharp.Models.ProjectInformationResponse>[]>;
    readonly projectChanged: Observable<OmniSharp.CombinationKey<OmniSharp.Models.ProjectInformationResponse>[]>;
    readonly projectRemoved: Observable<OmniSharp.CombinationKey<OmniSharp.Models.ProjectInformationResponse>[]>;
    readonly error: Observable<OmniSharp.CombinationKey<OmniSharp.Models.ErrorMessage>[]>;
    readonly msBuildProjectDiagnostics: Observable<OmniSharp.CombinationKey<OmniSharp.Models.MSBuildProjectDiagnostics>[]>;
    readonly packageRestoreStarted: Observable<OmniSharp.CombinationKey<OmniSharp.Models.PackageRestoreMessage>[]>;
    readonly packageRestoreFinished: Observable<OmniSharp.CombinationKey<OmniSharp.Models.PackageRestoreMessage>[]>;
    readonly unresolvedDependencies: Observable<OmniSharp.CombinationKey<OmniSharp.Models.UnresolvedDependenciesMessage>[]>;
    readonly state: Rx.Observable<OmniSharp.CombinationKey<DriverState>[]>;
    readonly status: Rx.Observable<OmniSharp.CombinationKey<OmnisharpClientStatus>[]>;
    constructor(clients?: Client[]);
    dispose(): void;
    protected makeAggregateObserable: <T>(selector: (client: Client) => Observable<T>) => Observable<{
        key: string;
        value: T;
    }[]>;
    observe<T>(selector: (client: Client) => Observable<T>): Observable<{
        key: string;
        value: T;
    }[]>;
    private onNext;
    add(client: Client): Disposable;
}
