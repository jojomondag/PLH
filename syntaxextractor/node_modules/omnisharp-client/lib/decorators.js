"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isNotNull = isNotNull;
exports.isAboveZero = isAboveZero;
exports.precondition = precondition;
exports.endpoint = endpoint;
exports.fixup = fixup;
exports.watchCommand = watchCommand;
exports.watchEvent = watchEvent;
exports.merge = merge;
exports.aggregate = aggregate;
exports.reference = reference;
exports.inheritProperties = inheritProperties;

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _rx = require("rx");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function isNotNull(method) {
    return function isNotNull(target, propertyKey, descriptor) {
        var value = descriptor.value;
        descriptor.value = function (request) {
            var result = method(request);
            if (result === null || result === undefined) {
                var match = method.toString().match(/function \(request\) { return (.*?); }/);
                var methodText = match && match[1] || method.toString();
                var errorText = methodText + "  must not be null.";
                throw new Error(errorText);
            }
            return value.apply(this, arguments);
        };
    };
}
function isAboveZero(method) {
    return function isAboveZero(target, propertyKey, descriptor) {
        var value = descriptor.value;
        descriptor.value = function (request) {
            var minValue = (this._options.oneBasedIndices ? 1 : 0) - 1;
            var result = method(request);
            if (result === null || result === undefined) {
                return;
            }
            if (result <= minValue) {
                var match = method.toString().match(/function \(request\) { return (.*?); }/);
                var methodText = match && match[1] || method.toString();
                var errorText = methodText + " must be greater than or equal to " + (minValue + 1) + ".";
                throw new Error(errorText);
            }
            return value.apply(this, arguments);
        };
    };
}
function precondition(method) {
    for (var _len = arguments.length, decorators = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        decorators[_key - 1] = arguments[_key];
    }

    return function precondition(target, propertyKey, descriptor) {
        var originalValue = descriptor.value;
        var methods = _.map(decorators, function (decorator) {
            descriptor.value = _.noop;
            decorator(target, propertyKey, descriptor);
            return descriptor.value;
        });
        descriptor.value = function (request) {
            var _this = this;

            if (method(request)) {
                methods.forEach(function (m) {
                    return m.call(_this, request);
                });
            }
            return originalValue.apply(this, arguments);
        };
    };
}
function endpoint() {
    var version = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

    var format = function format(name) {
        return name;
    };
    if (version > 1) {
        format = function (name) {
            return "v" + version + "/" + name;
        };
    }
    return function endpoint(target, propertyKey, descriptor) {
        var name = format(propertyKey);
        descriptor.value = function (request, options) {
            return this.request(name, request, options);
        };
        descriptor.enumerable = true;
    };
}
function fixup(target, propertyKey, descriptor) {
    var value = descriptor.value;
    descriptor.value = function (request, options) {
        this._fixup(propertyKey, request, options);
        return value.apply(this, arguments);
    };
}
function watchCommand(target, propertyKey, descriptor) {
    var internalKey = "__" + propertyKey + "__";
    descriptor.get = function () {
        var instance = this._client || this;
        if (!instance._commandWatchers.get(propertyKey)) {
            var subject = new _rx.Subject();
            var observable = subject.share();
            instance._commandWatchers.set(propertyKey.toLowerCase(), [subject, observable]);
            this[internalKey] = observable;
        }
        return this[internalKey];
    };
    descriptor.enumerable = true;
}
function watchEvent(target, propertyKey, descriptor) {
    var internalKey = "__" + propertyKey + "__";
    var eventKey = propertyKey[0].toUpperCase() + propertyKey.substr(1);
    descriptor.get = function () {
        var instance = this._client || this;
        if (!instance._eventWatchers.get(eventKey)) {
            var subject = new _rx.Subject();
            var observable = subject.share();
            instance._eventWatchers.set(eventKey, [subject, observable]);
            this[internalKey] = observable;
        }
        return this[internalKey];
    };
    descriptor.enumerable = true;
}
function merge(target, propertyKey, descriptor) {
    var internalKey = "__" + propertyKey + "__";
    var method = function method(c) {
        return c.observe[propertyKey] || c[propertyKey];
    };
    descriptor.get = function () {
        if (!this[internalKey]) {
            var value = this.makeMergeObserable(method);
            this[internalKey] = value;
        }
        return this[internalKey];
    };
    descriptor.enumerable = true;
}
function aggregate(target, propertyKey, descriptor) {
    var internalKey = "__" + propertyKey + "__";
    var method = function method(c) {
        return c.observe[propertyKey] || c[propertyKey];
    };
    descriptor.get = function () {
        if (!this[internalKey]) {
            var value = this.makeAggregateObserable(method);
            this[internalKey] = value;
        }
        return this[internalKey];
    };
    descriptor.enumerable = true;
}
function reference(target, propertyKey, descriptor) {
    descriptor.get = function () {
        return this._client[propertyKey];
    };
}
function inheritProperties(source, dest) {
    _.each(_.keys(source.prototype), function (key) {
        var descriptor = Object.getOwnPropertyDescriptor(source.prototype, key);
        var isDefined = !!_.has(dest.prototype, key);
        if (descriptor && !isDefined) {
            if (_.has(descriptor, "value") || _.has(descriptor, "writable")) {
                Object.defineProperty(dest.prototype, key, {
                    configurable: descriptor.configurable,
                    enumerable: descriptor.enumerable,
                    value: descriptor.value,
                    writable: descriptor.writable
                });
            } else {
                Object.defineProperty(dest.prototype, key, {
                    configurable: descriptor.configurable,
                    enumerable: descriptor.enumerable,
                    get: descriptor.get,
                    set: descriptor.set
                });
            }
        }
    });
}