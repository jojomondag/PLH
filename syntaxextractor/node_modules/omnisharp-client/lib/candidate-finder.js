"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findCandidates = exports.Candidate = undefined;
exports.ifEmpty = ifEmpty;

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _path = require("path");

var _rx = require("rx");

var _fs = require("fs");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var glob = require("globby");
function ifEmpty(observable, other) {
    return _rx.Observable.create(function (observer) {
        var hasValue = false;
        var cd = new _rx.CompositeDisposable();
        cd.add(observable.subscribe(function (value) {
            hasValue = true;
            observer.onNext(value);
        }, function (e) {
            return observer.onError(e);
        }, function () {
            if (!hasValue) {
                cd.add(other.subscribe(function (value) {
                    return observer.onNext(value);
                }, function (e) {
                    return observer.onError(e);
                }, function () {
                    return observer.onCompleted();
                }));
            } else {
                observer.onCompleted();
            }
        }));
        return cd;
    });
}

var Candidate = exports.Candidate = (function () {
    function Candidate(originalFile, predicate) {
        _classCallCheck(this, Candidate);

        this.originalFile = originalFile = (0, _path.normalize)(originalFile);
        this.path = _.endsWith(originalFile, ".sln") ? originalFile : (0, _path.dirname)(originalFile);
        this.isProject = predicate(originalFile);
        Object.freeze(this);
    }

    _createClass(Candidate, [{
        key: "toString",
        value: function toString() {
            return this.path;
        }
    }]);

    return Candidate;
})();

var findCandidates = exports.findCandidates = (function () {
    function realFindCandidates(location, logger) {
        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        location = _.trimRight(location, _path.sep);
        var solutionFilesToSearch = options.solutionFilesToSearch || (options.solutionFilesToSearch = ["global.json", "*.sln"]);
        var projectFilesToSearch = options.projectFilesToSearch || (options.projectFilesToSearch = ["project.json", "*.csproj"]);
        var sourceFilesToSearch = options.sourceFilesToSearch || (options.sourceFilesToSearch = ["*.cs"]);
        var solutionIndependentSourceFilesToSearch = options.solutionIndependentSourceFilesToSearch || (options.solutionIndependentSourceFilesToSearch = ["*.csx"]);
        var solutionsOrProjects = searchForCandidates(location, solutionFilesToSearch, projectFilesToSearch, logger).toArray().flatMap(function (result) {
            return result.length ? _rx.Observable.from(result) : searchForCandidates(location, projectFilesToSearch, [], logger);
        }).toArray().map(squashCandidates);
        var independentSourceFiles = searchForCandidates(location, solutionIndependentSourceFilesToSearch, [], logger).toArray();
        var baseFiles = _rx.Observable.concat(solutionsOrProjects, independentSourceFiles).flatMap(function (x) {
            return _rx.Observable.from(x);
        });
        var sourceFiles = searchForCandidates(location, sourceFilesToSearch, [], logger);
        var predicate = function predicate(path) {
            return _.any(solutionFilesToSearch.concat(projectFilesToSearch), function (pattern) {
                return _.endsWith(path, _.trimLeft(pattern, "*"));
            });
        };
        return ifEmpty(baseFiles, sourceFiles).map(function (file) {
            return new Candidate(file, predicate);
        }).distinct(function (x) {
            return x.path;
        }).toArray().tapOnNext(function (candidates) {
            return logger.log("Omni Project Candidates: Found " + candidates);
        });
    }
    function findCandidates(location, logger) {
        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        return realFindCandidates(location, logger, options).map(function (z) {
            return z.map(function (x) {
                return x.toString();
            });
        });
    }
    findCandidates.withCandidates = realFindCandidates;
    return findCandidates;
})();
function squashCandidates(candidates) {
    var rootCandidateCount = getMinCandidate(candidates);
    return _.unique(_.filter(_.map(candidates, _path.normalize), function (z) {
        return z.split(_path.sep).length === rootCandidateCount;
    }));
}
function getMinCandidate(candidates) {
    if (!candidates.length) return -1;
    return _.min(_.map(candidates, _path.normalize), function (z) {
        return z.split(_path.sep).length;
    }).split(_path.sep).length;
}
function searchForCandidates(location, filesToSearch, projectFilesToSearch, logger) {
    var locations = location.split(_path.sep);
    locations = locations.map(function (loc, index) {
        return _.take(locations, locations.length - index).join(_path.sep);
    });
    locations = locations.slice(0, Math.min(5, locations.length));
    var rootObservable = _rx.Observable.from(locations).subscribeOn(_rx.Scheduler.async).map(function (loc) {
        return {
            loc: loc,
            files: filesToSearch.map(function (fileName) {
                return (0, _path.join)(loc, fileName);
            })
        };
    }).flatMap(function (_ref) {
        var loc = _ref.loc;
        var files = _ref.files;

        logger.log("Omni Project Candidates: Searching " + loc + " for " + filesToSearch);
        return _rx.Observable.from(files).flatMap(function (file) {
            return glob([file], { cache: {} });
        }).map(function (x) {
            if (x.length > 1) {
                // Handle the unity project case
                // Also handle optional solutions that may also exist with the unity ones.
                var unitySolutionIndex = _.findIndex(x, function (z) {
                    return _.endsWith(z, "-csharp.sln");
                });
                if (unitySolutionIndex > -1) {
                    (function () {
                        var unitySolution = x[unitySolutionIndex];
                        var baseSolution = unitySolution.substr(0, unitySolution.indexOf("-csharp.sln")) + ".sln";
                        var baseSolutionIndex = _.findIndex(x, function (z) {
                            return z.toLowerCase() === baseSolution.toLowerCase();
                        });
                        if (baseSolutionIndex > -1) {
                            // Remove the index
                            x.splice(baseSolutionIndex, 1);
                        }
                    })();
                }
            }
            if (_.any(x, function (file) {
                return _.endsWith(file, ".sln");
            })) {
                return x.filter(function (file) {
                    var content = (0, _fs.readFileSync)(file).toString();
                    return _.any(projectFilesToSearch, function (path) {
                        return content.indexOf(_.trimLeft(path, "*")) > -1;
                    });
                });
            }
            return x;
        });
    }).filter(function (z) {
        return z.length > 0;
    }).defaultIfEmpty([]).first().flatMap(function (z) {
        return _rx.Observable.from(z);
    });
    return rootObservable;
}