import * as OmniSharp from "./omnisharp-server";
import { RequestContext, ResponseContext, CommandContext } from "./contexts";
export declare enum Driver {
    Http = 0,
    Stdio = 1,
}
export declare enum DriverState {
    Disconnected = 0,
    Downloading = 1,
    Downloaded = 2,
    Connecting = 3,
    Connected = 4,
    Error = 5,
}
export declare enum Runtime {
    ClrOrMono = 0,
    CoreClr = 1,
}
export interface IStaticDriver {
    new (options: IDriverOptions): IDriver;
}
export interface ILogger {
    log(...values: any[]): void;
    error(...values: any[]): void;
}
export interface IDriverOptions {
    projectPath: string;
    remote?: boolean;
    debug?: boolean;
    serverPath?: string;
    findProject?: boolean;
    logger?: ILogger;
    timeout?: number;
    runtime?: Runtime;
    additionalArguments?: string[];
    plugins?: IOmnisharpPlugin[];
    version?: string;
}
export interface IDriver extends Rx.IDisposable {
    id: string;
    connect(): void;
    currentState: DriverState;
    events: Rx.Observable<OmniSharp.Stdio.Protocol.EventPacket>;
    commands: Rx.Observable<OmniSharp.Stdio.Protocol.ResponsePacket>;
    state: Rx.Observable<DriverState>;
    disconnect(): void;
    serverPath: string;
    projectPath: string;
    runtime: Runtime;
    request<TRequest, TResponse>(command: string, request?: TRequest): Rx.Observable<TResponse>;
}
export interface IPluginDriver extends IDriver {
    updatePlugins(plugins: IOmnisharpPlugin): void;
}
export declare function isPluginDriver(driver: any): driver is IPluginDriver;
export interface OmnisharpClientOptions extends IDriverOptions {
    driver?: Driver;
    oneBasedIndices?: boolean;
    statusSampleTime?: number;
    responseSampleTime?: number;
    concurrency?: number;
    concurrencyTimeout?: number;
    omnisharp?: {
        dnx?: {
            alias?: string;
            projects?: string;
            enablePackageRestore?: string;
            packageRestoreTimeout?: number;
        };
        formattingOptions?: {
            newLine?: string;
            useTabs?: boolean;
            tabSize?: number;
        };
    };
}
export interface IOmnisharpPlugin {
    name?: string;
    version?: string;
    location?: string;
}
export interface OmnisharpClientStatus {
    state: DriverState;
    outgoingRequests: number;
    hasOutgoingRequests: boolean;
}
export declare module Omnisharp {
    interface Events {
        events: Rx.Observable<OmniSharp.Stdio.Protocol.EventPacket>;
        commands: Rx.Observable<OmniSharp.Stdio.Protocol.ResponsePacket>;
        state: Rx.Observable<DriverState>;
        status: Rx.Observable<OmnisharpClientStatus>;
        requests: Rx.Observable<RequestContext<any>>;
        responses: Rx.Observable<ResponseContext<any, any>>;
        errors: Rx.Observable<CommandContext<any>>;
    }
}
