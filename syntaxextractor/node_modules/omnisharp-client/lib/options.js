"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ensureClientOptions = ensureClientOptions;
exports.flattenArguments = flattenArguments;

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function ensureClientOptions(options) {
    if (options.statusSampleTime) options.statusSampleTime = 500;
    if (options.responseSampleTime) options.responseSampleTime = 100;
    if (options.concurrency) options.concurrency = 4;
    if (options.timeout) options.timeout = 60;
    if (options.concurrencyTimeout) options.concurrencyTimeout = Math.ceil(options.timeout / 6) * 1000;
    // Keep concurrency capped at 2
    // This lets us get around an issue with a single stuck request (that is taking a while to complete)
    options.concurrency = Math.max(options.concurrency, 2);
    // Keep concurrencyTimeout at a decently high interval.
    options.concurrencyTimeout = Math.max(options.concurrencyTimeout, Math.min(options.timeout * 1000, 5000));
    options.additionalArguments = flattenArguments(options.omnisharp || {});
    if (!options.plugins) {
        // By default we indicate support no plugins
        options.plugins = [];
    }
}
function flattenArguments(obj) {
    var prefix = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

    var result = [];
    _lodash2.default.each(obj, function (value, key) {
        if (_lodash2.default.isObject(value)) {
            result.push.apply(result, _toConsumableArray(flattenArguments(value, "" + (prefix ? prefix + ":" : "") + (key[0].toUpperCase() + key.substr(1)))));
            return;
        }
        result.push("--" + (prefix ? prefix + ":" : "") + (key[0].toUpperCase() + key.substr(1)) + "=" + value);
    });
    return result;
}